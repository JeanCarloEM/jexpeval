{"version":3,"file":"jexpeval.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;ACVmC;AAOnC;IACE,uBACqB,OAAqB,EACrB,OAAqB,EACrB,OAAoB;QAFpB,YAAO,GAAP,OAAO,CAAc;QACrB,YAAO,GAAP,OAAO,CAAc;QACrB,YAAO,GAAP,OAAO,CAAa;IACtC,CAAC;IAOU,qBAAO,GAArB,UAAsB,KAAU;QAC9B,IACE,OAAO,KAAK,KAAK,QAAQ;YACzB,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC;YAC5B,6DAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,EACzC;YACA,OAAO,KAAK,CAAC,IAAI,CAAC;SACnB;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAOH,oBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;AClCM,IAAM,mBAAmB,GAAG;IACjC,UAAU;IACV,YAAY;IACZ,kBAAkB;IAClB,SAAS;IACT,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,uBAAuB;IACvB,iBAAiB;CAClB,CAAC;;;;;;;UCbF;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLgD;AAOhD;IAA8B,4BAAa;IAA3C;;IA8BA,CAAC;IAxBQ,uBAAI,GAAX,UAAY,KAA+B;QAA3C,iBAuBC;QAtBC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,qCAAqC,CAAC;SAC7C;QAED,OAAO,IAAI,OAAO,CAAqB,UAAC,EAAE,EAAE,GAAG;YAC7C,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,CAAM;gBAC9B,IAAI,EAAE,GACJ,KAAI,CAAC,WACN,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAEb,IAAI,EAAE,KAAK,IAAI,EAAE;oBACf,MAAM,2BAA2B,CAAC;iBACnC;gBAEe,CACd,IAAU,qBAAO,CAAC,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,OAAO,CAAC,CAC/D;qBACC,IAAI,CAAkB,CAAC,CAAC;qBACxB,IAAI,CAAC,UAAC,EAAE,IAAK,SAAE,CAAC,EAAE,CAAC,EAAN,CAAM,CAAC;qBACpB,KAAK,CAAC,UAAC,EAAE,IAAK,UAAG,CAAC,EAAE,CAAC,EAAP,CAAO,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACH,eAAC;AAAD,CAAC,CA9B6B,yDAAa,GA8B1C","sources":["webpack://jexpeval/webpack/universalModuleDefinition","webpack://jexpeval/./src/baseProcessor.ts","webpack://jexpeval/./src/definitions.ts","webpack://jexpeval/webpack/bootstrap","webpack://jexpeval/webpack/runtime/define property getters","webpack://jexpeval/webpack/runtime/global","webpack://jexpeval/webpack/runtime/hasOwnProperty shorthand","webpack://jexpeval/webpack/runtime/make namespace object","webpack://jexpeval/./src/jexpeval.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jexpeval\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jexpeval\"] = factory();\n\telse\n\t\troot[\"jexpeval\"] = factory();\n})(self, () => {\nreturn ","import * as D from \"./definitions\";\nimport jsep from \"jsep\";\nimport { Literal } from \"./types/Literal\";\n\n/**\n * https://ericsmekens.github.io/jsep/\n */\nexport abstract class baseProcessor implements D.TTypesProcessor {\n  constructor(\n    protected readonly _parser: D.TExpParser,\n    protected readonly _caller: D.TGetCaller,\n    protected readonly _values: D.TGetValue,\n  ) {}\n\n  /**\n   *\n   * @param input\n   * @returns\n   */\n  public static getType(input: any): null | jsep.ExpressionType {\n    if (\n      typeof input === \"object\" &&\n      input.hasOwnProperty(\"type\") &&\n      D.ExpressionTypeNames.indexOf(input.type)\n    ) {\n      return input.type;\n    }\n\n    return null;\n  }\n\n  /**\n   *\n   * @param input\n   */\n  abstract eval(input: string | jsep.Expression): Promise<D.TDefaultBaseType>;\n}\n","import jsep from \"jsep\";\n\nexport const ExpressionTypeNames = [\n  \"Compound\",\n  \"Identifier\",\n  \"MemberExpression\",\n  \"Literal\",\n  \"ThisExpression\",\n  \"CallExpression\",\n  \"UnaryExpression\",\n  \"BinaryExpression\",\n  \"ConditionalExpression\",\n  \"ArrayExpression\",\n];\n\nexport type TDefaultBaseType = null | string | number | boolean;\n//export type TTypesProcessor = (input: ExpressionType) => Promise<TDefaultBaseType>;\n\nexport type TGetCaller = (\n  name: string,\n  args: any[],\n) => Promise<TDefaultBaseType>;\nexport type TGetValue = (\n  name: string,\n  args: any[],\n) => Promise<TDefaultBaseType>;\nexport type TExpParser = (input: string) => Promise<jsep.Expression>;\n\nexport interface TStringKeyMap {\n  [key: string]: TDefaultBaseType;\n}\n\nexport interface TTypesProcessor {\n  eval(input: string | jsep.Expression): Promise<TDefaultBaseType>;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as D from \"./definitions\";\nimport { baseProcessor } from \"./baseProcessor\";\nimport { Literal } from \"./types/Literal\";\nimport jsep from \"jsep\";\n\n/**\n * https://ericsmekens.github.io/jsep/\n */\nexport class jexpeval extends baseProcessor {\n  /**\n   *\n   * @param input\n   * @returns\n   */\n  public eval(input: string | jsep.Expression): Promise<D.TDefaultBaseType> {\n    if (typeof input !== \"string\") {\n      throw \"Eval input in jexpeval isnot string\";\n    }\n\n    return new Promise<D.TDefaultBaseType>((R0, R_0) => {\n      this._parser(input).then((r: any) => {\n        let tp: null | jsep.ExpressionType = (\n          this.constructor as typeof jexpeval\n        ).getType(r);\n\n        if (tp === null) {\n          throw \"Invalid type in lex eval.\";\n        }\n\n        (<baseProcessor>(\n          new (<any>global)[tp](this._parser, this._caller, this._values)\n        ))\n          .eval(<jsep.Expression>r)\n          .then((r1) => R0(r1))\n          .catch((r2) => R_0(r2));\n      });\n    });\n  }\n}\n"],"names":[],"sourceRoot":""}