{"version":3,"file":"jexpeval.js","mappings":"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","sources":["webpack://jexpeval/webpack/universalModuleDefinition","webpack://jexpeval/./src/baseProcessor.ts","webpack://jexpeval/./src/unknowParser.ts","webpack://jexpeval/webpack/bootstrap","webpack://jexpeval/webpack/runtime/define property getters","webpack://jexpeval/webpack/runtime/global","webpack://jexpeval/webpack/runtime/hasOwnProperty shorthand","webpack://jexpeval/webpack/runtime/make namespace object","webpack://jexpeval/./src/jexpeval.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jexpeval\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jexpeval\"] = factory();\n\telse\n\t\troot[\"jexpeval\"] = factory();\n})(self, () => {\nreturn ","import * as D from \"./definitions\";\nimport * as unknowParser from \"./unknowParser\";\n\n/**\n * https://ericsmekens.github.io/jsep/\n */\nexport abstract class baseProcessor implements D.TTypesProcessor {\n  constructor(\n    protected readonly _parser: D.TExpParser,\n    protected readonly _caller: D.TGetCaller = baseProcessor.genericCallerSolver,\n    protected readonly _values: D.TGetValue = baseProcessor.genericValuesSolver,\n  ) {}\n\n  /**\n   *\n   * @param input\n   */\n  abstract eval(\n    input: string | unknowParser.Expression,\n  ): Promise<D.TEvalResult>;\n\n  /**\n   * Default provided for callers solvers return nothing\n   *\n   * @param name\n   * @param args\n   * @returns\n   */\n  public static genericCallerSolver(\n    name: string,\n    args: any[],\n  ): Promise<D.TEvalResult> {\n    return new Promise<D.TEvalResult>((R, R_) => {\n      R(`\\`${name}\\``);\n    });\n  }\n\n  /**\n   * Default provided for values solvers return nothing\n   *\n   * @param name\n   * @param args\n   * @returns\n   */\n  public static genericValuesSolver(name: string): Promise<D.TEvalResult> {\n    return new Promise<D.TEvalResult>((R, R_) => {\n      R(`\\`${name}\\``);\n    });\n  }\n\n  /**\n   * Default provided for when the parser (unknowParser) can be invoked as a function\n   *\n   * @param f a unknowParser function\n   * @param i string to parser\n   * @returns\n   */\n  public static genericCallerUnknowParser(\n    f: unknowParser.unknowParserCaller,\n    i: string,\n  ): Promise<unknowParser.Expression> {\n    return new Promise<unknowParser.Expression>((R1, R_1) => {\n      if (typeof f !== \"function\") {\n        throw \"JSEP is not defined\";\n      }\n\n      let resp: unknowParser.Expression = f(i);\n\n      if (typeof resp !== \"object\") {\n        throw \"Value returned in JSEP is not array\";\n      }\n\n      if (!resp.hasOwnProperty(\"type\")) {\n        throw \"Value returned in JSEP dont contain 'type' item.\";\n      }\n\n      R1(resp);\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @returns\n   */\n  public static getType(input: any): null | unknowParser.ExpressionType {\n    if (\n      typeof input === \"object\" &&\n      input.hasOwnProperty(\"type\") &&\n      unknowParser.ExpressionTypeNames.indexOf(input.type)\n    ) {\n      return input.type;\n    }\n\n    return null;\n  }\n}\n","/**\n * @git https://github.com/EricSmekens/jsep\n * @from EricSmekens\n * @license MIT\n */\n\nexport type baseTypes =\n  | string\n  | number\n  | boolean\n  | RegExp\n  | null\n  | undefined\n  | object;\nexport interface Expression {\n  type: string;\n  [key: string]: baseTypes | Expression | Array<baseTypes | Expression>;\n}\n\nexport interface ArrayExpression extends Expression {\n  type: \"ArrayExpression\";\n  elements: Expression[];\n}\n\nexport interface BinaryExpression extends Expression {\n  type: \"BinaryExpression\";\n  operator: string;\n  left: Expression;\n  right: Expression;\n}\n\nexport interface CallExpression extends Expression {\n  type: \"CallExpression\";\n  arguments: Expression[];\n  callee: Expression;\n}\n\nexport interface Compound extends Expression {\n  type: \"Compound\";\n  body: Expression[];\n}\n\nexport interface ConditionalExpression extends Expression {\n  type: \"ConditionalExpression\";\n  test: Expression;\n  consequent: Expression;\n  alternate: Expression;\n}\n\nexport interface Identifier extends Expression {\n  type: \"Identifier\";\n  name: string;\n}\n\nexport interface Literal extends Expression {\n  type: \"Literal\";\n  value: boolean | number | string | RegExp | null;\n  raw: string;\n}\n\nexport interface MemberExpression extends Expression {\n  type: \"MemberExpression\";\n  computed: boolean;\n  object: Expression;\n  property: Expression;\n  optional?: boolean;\n}\n\nexport interface ThisExpression extends Expression {\n  type: \"ThisExpression\";\n}\n\nexport interface UnaryExpression extends Expression {\n  type: \"UnaryExpression\";\n  operator: string;\n  argument: Expression;\n  prefix: boolean;\n}\n\nexport type ExpressionType =\n  | \"Compound\"\n  | \"Identifier\"\n  | \"MemberExpression\"\n  | \"Literal\"\n  | \"ThisExpression\"\n  | \"CallExpression\"\n  | \"UnaryExpression\"\n  | \"BinaryExpression\"\n  | \"ConditionalExpression\"\n  | \"ArrayExpression\";\n\nexport type CoreExpression =\n  | ArrayExpression\n  | BinaryExpression\n  | CallExpression\n  | Compound\n  | ConditionalExpression\n  | Identifier\n  | Literal\n  | MemberExpression\n  | ThisExpression\n  | UnaryExpression;\n\nexport type PossibleExpression = Expression | undefined;\n\nexport const ExpressionTypeNames = [\n  \"Compound\",\n  \"Identifier\",\n  \"MemberExpression\",\n  \"Literal\",\n  \"ThisExpression\",\n  \"CallExpression\",\n  \"UnaryExpression\",\n  \"BinaryExpression\",\n  \"ConditionalExpression\",\n  \"ArrayExpression\",\n];\n\nexport type unknowParserCaller = (val: string) => Expression;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as D from \"./definitions\";\nimport { baseProcessor } from \"./baseProcessor\";\nimport { Literal } from \"./types/Literal\";\nimport * as unknowParser from \"./unknowParser.js\";\n\n/**\n * https://ericsmekens.github.io/unknowParser/\n */\nexport class jexpeval extends baseProcessor {\n  /**\n   *\n   * @param input\n   * @returns\n   */\n  public eval(input: string | unknowParser.Expression): Promise<D.TEvalResult> {\n    if (typeof input !== \"string\") {\n      throw \"Eval input in jexpeval isnot string\";\n    }\n\n    return new Promise<D.TEvalResult>((R0, R_0) => {\n      this._parser(input).then((r: any) => {\n        let tp: null | unknowParser.ExpressionType = (\n          this.constructor as typeof jexpeval\n        ).getType(r);\n\n        if (tp === null) {\n          throw \"Invalid type in lex eval.\";\n        }\n\n        (<baseProcessor>(\n          new (<any>global)[tp](this._parser, this._caller, this._values)\n        ))\n          .eval(<unknowParser.Expression>r)\n          .then((r1) => R0(r1))\n          .catch((r2) => R_0(r2));\n      });\n    });\n  }\n}\n"],"names":[],"sourceRoot":""}