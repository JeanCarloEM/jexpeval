{"version":3,"file":"jexpeval.js","mappings":"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","sources":["webpack://jexpeval/webpack/universalModuleDefinition","webpack://jexpeval/./src/baseProcessor.ts","webpack://jexpeval/./src/unknowParser.ts","webpack://jexpeval/./src/worker.ts","webpack://jexpeval/webpack/bootstrap","webpack://jexpeval/webpack/runtime/define property getters","webpack://jexpeval/webpack/runtime/global","webpack://jexpeval/webpack/runtime/hasOwnProperty shorthand","webpack://jexpeval/webpack/runtime/make namespace object","webpack://jexpeval/./src/jexpeval.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jexpeval\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jexpeval\"] = factory();\n\telse\n\t\troot[\"jexpeval\"] = factory();\n})(self, () => {\nreturn ","import * as D from \"./definitions\";\nimport * as unknowParser from \"./unknowParser\";\n\n/**\n * https://ericsmekens.github.io/jsep/\n */\nexport abstract class baseProcessor implements D.TTypesProcessor {\n  constructor(\n    protected readonly _parser: D.TExpParser,\n    protected readonly _caller: D.TGetCaller = baseProcessor.genericCallerSolver,\n    protected readonly _values: D.TGetValue = baseProcessor.genericValuesSolver,\n  ) {}\n\n  /**\n   *\n   * @param input\n   */\n  abstract eval(\n    input: string | unknowParser.Expression,\n  ): Promise<D.TEvalResult>;\n\n  /**\n   * Default provided for callers solvers return nothing\n   *\n   * @param name\n   * @param args\n   * @returns\n   */\n  public static genericCallerSolver(\n    name: string,\n    args: any[],\n  ): Promise<D.TEvalResult> {\n    return new Promise<D.TEvalResult>((R, R_) => {\n      R(`\\`${name}\\``);\n    });\n  }\n\n  /**\n   * Default provided for values solvers return nothing\n   *\n   * @param name\n   * @param args\n   * @returns\n   */\n  public static genericValuesSolver(name: string): Promise<D.TEvalResult> {\n    return new Promise<D.TEvalResult>((R, R_) => {\n      R(`\\`${name}\\``);\n    });\n  }\n\n  /**\n   * Default provided for when the parser (unknowParser) can be invoked as a function\n   *\n   * @param f a unknowParser function\n   * @param i string to parser\n   * @returns\n   */\n  public static genericCallerUnknowParser(\n    f: unknowParser.unknowParserCaller,\n    i: string,\n  ): Promise<unknowParser.Expression> {\n    return new Promise<unknowParser.Expression>((R1, R_1) => {\n      if (typeof f !== \"function\") {\n        throw \"JSEP is not defined\";\n      }\n\n      let resp: unknowParser.Expression = f(i);\n\n      if (typeof resp !== \"object\") {\n        throw \"Value returned in JSEP is not array\";\n      }\n\n      if (!resp.hasOwnProperty(\"type\")) {\n        throw \"Value returned in JSEP dont contain 'type' item.\";\n      }\n\n      R1(resp);\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @returns\n   */\n  public static getType(input: any): null | unknowParser.ExpressionType {\n    if (\n      typeof input === \"object\" &&\n      input.hasOwnProperty(\"type\") &&\n      unknowParser.ExpressionTypeNames.indexOf(input.type)\n    ) {\n      return input.type;\n    }\n\n    return null;\n  }\n}\n","/**\n * @git https://github.com/EricSmekens/jsep\n * @from EricSmekens\n * @license MIT\n */\n\nexport type baseTypes =\n  | string\n  | number\n  | boolean\n  | RegExp\n  | null\n  | undefined\n  | object;\nexport interface Expression {\n  type: string;\n  [key: string]: baseTypes | Expression | Array<baseTypes | Expression>;\n}\n\nexport interface ArrayExpression extends Expression {\n  type: \"ArrayExpression\";\n  elements: Expression[];\n}\n\nexport interface BinaryExpression extends Expression {\n  type: \"BinaryExpression\";\n  operator: string;\n  left: Expression;\n  right: Expression;\n}\n\nexport interface CallExpression extends Expression {\n  type: \"CallExpression\";\n  arguments: Expression[];\n  callee: Expression;\n}\n\nexport interface Compound extends Expression {\n  type: \"Compound\";\n  body: Expression[];\n}\n\nexport interface ConditionalExpression extends Expression {\n  type: \"ConditionalExpression\";\n  test: Expression;\n  consequent: Expression;\n  alternate: Expression;\n}\n\nexport interface Identifier extends Expression {\n  type: \"Identifier\";\n  name: string;\n}\n\nexport interface Literal extends Expression {\n  type: \"Literal\";\n  value: boolean | number | string | RegExp | null;\n  raw: string;\n}\n\nexport interface MemberExpression extends Expression {\n  type: \"MemberExpression\";\n  computed: boolean;\n  object: Expression;\n  property: Expression;\n  optional?: boolean;\n}\n\nexport interface ThisExpression extends Expression {\n  type: \"ThisExpression\";\n}\n\nexport interface UnaryExpression extends Expression {\n  type: \"UnaryExpression\";\n  operator: string;\n  argument: Expression;\n  prefix: boolean;\n}\n\nexport type ExpressionType =\n  | \"Compound\"\n  | \"Identifier\"\n  | \"MemberExpression\"\n  | \"Literal\"\n  | \"ThisExpression\"\n  | \"CallExpression\"\n  | \"UnaryExpression\"\n  | \"BinaryExpression\"\n  | \"ConditionalExpression\"\n  | \"ArrayExpression\";\n\nexport type CoreExpression =\n  | ArrayExpression\n  | BinaryExpression\n  | CallExpression\n  | Compound\n  | ConditionalExpression\n  | Identifier\n  | Literal\n  | MemberExpression\n  | ThisExpression\n  | UnaryExpression;\n\nexport type PossibleExpression = Expression | undefined;\n\nexport const ExpressionTypeNames = [\n  \"Compound\",\n  \"Identifier\",\n  \"MemberExpression\",\n  \"Literal\",\n  \"ThisExpression\",\n  \"CallExpression\",\n  \"UnaryExpression\",\n  \"BinaryExpression\",\n  \"ConditionalExpression\",\n  \"ArrayExpression\",\n];\n\nexport type unknowParserCaller = (val: string) => Expression;\n","import * as D from \"./definitions\";\nimport { baseProcessor } from \"./baseProcessor\";\nimport { Literal } from \"./types/Literal\";\nimport * as unknowParser from \"./unknowParser.js\";\nimport { jexpeval } from \"./jexpeval.js\";\n\nexport type TGetterStringType = \"TGetCaller\" | \"TGetValue\";\n\nexport type TPromiseFromBrowserToWorker = (\n  name: string,\n  { ...args }: any,\n) => Promise<any>;\n\nexport interface ISubNambedCallers {\n  [key: string]: ({}: any) => any;\n}\n\n/**\n *\n */\nexport function runWorkerScript(\n  starter: (getFromBrowser: TPromiseFromBrowserToWorker) => void,\n) {\n  function basicMessageCheck(e: any): string {\n    if (typeof e !== \"object\") {\n      return \"[jexpeval][runAsWorker][worker] message isnot object.\";\n    }\n\n    if (!e.hasOwnProperty(\"data\")) {\n      return \"[jexpeval][runAsWorker][worker] message dont contain 'data' proprerty.\";\n    }\n\n    if (typeof e.data !== \"object\") {\n      return \"[jexpeval][runAsWorker][worker] data of message isnot object.\";\n    }\n\n    return \"\";\n  }\n\n  const uuid = () => {\n    return \"uid10000000100040008000100000000000\".replace(/[018]/g, (x) => {\n      const c: any = <any>x;\n      return (\n        c ^\n        (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))\n      ).toString(16);\n    });\n  };\n\n  function customPromiseMessage(\n    id: string,\n    caller: string | TGetterStringType,\n    args: any[],\n  ): Promise<any> {\n    let _terminated = false;\n\n    return new Promise<any>((R0, R_0) => {\n      self.addEventListener(\"message\", function (e) {\n        if (_terminated) {\n          return;\n        }\n\n        let _error: string = basicMessageCheck(e);\n\n        _error =\n          _error.trim().length === 0\n            ? (() => {\n                if (!e.data.hasOwnProperty(\"return\")) {\n                  return \"[jexpeval][runAsWorker][worker] message in 'customPromiseMessage' dont contain 'return' proprerty.\";\n                }\n                if (typeof e.data.id !== \"string\") {\n                  return \"[jexpeval][runAsWorker][worker] message 'id' in 'customPromiseMessage' isnot string value.\";\n                }\n                if (e.data.id.trim().length === 0) {\n                  return \"[jexpeval][runAsWorker][worker] message 'id' in 'customPromiseMessage' is empty.\";\n                }\n                return \"\";\n              })()\n            : _error;\n\n        if (_error.trim().length > 0) {\n          return R_0(_error);\n        }\n\n        if (e.data.id !== id) {\n          return;\n        }\n\n        _terminated = true;\n        R0(e.data.return);\n      });\n\n      self.postMessage({ caller: caller, args: args, id: id });\n    });\n  }\n\n  function getFromBrowser(name: string, { ...args }: any): Promise<any> {\n    return new Promise<any>((R0, R_0) => {\n      const uid: string = uuid();\n      customPromiseMessage(uid, name, { ...args })\n        .catch((e) => R_0(e))\n        .then((r) => R0(r));\n    });\n  }\n\n  const run = (str: string, printable: boolean) =>\n    void (\n      {\n        /*\n    new jexpeval(\n      parserW,\n      callerW,\n      valuesW,\n    ).eval(str, printable)\n      .catch(e => { })\n      .then(r => { });\n      */\n      }\n    );\n\n  self.addEventListener(\"message\", function (e) {\n    let _error: string = basicMessageCheck(e);\n\n    _error =\n      _error.trim().length === 0\n        ? (() => {\n            if (!e.data.hasOwnProperty(\"start\")) {\n              return \"[jexpeval][runAsWorker][worker] message dont contain 'eval' proprerty.\";\n            }\n\n            if (typeof e.data.start !== \"boolean\") {\n              return \"[jexpeval][runAsWorker][worker] message 'eval' isnot boolean value.\";\n            }\n\n            if (!e.data.hasOwnProperty(\"printable\")) {\n              return \"[jexpeval][runAsWorker][worker] message dont contain 'printable' proprerty.\";\n            }\n\n            if (typeof e.data.printable !== \"boolean\") {\n              return \"[jexpeval][runAsWorker][worker] message 'printable' isnot boolean value.\";\n            }\n\n            return \"\";\n          })()\n        : _error;\n\n    if (_error.trim().length > 0) {\n      return self.postMessage({ error: _error });\n    }\n\n    if (e.data.hasOwnProperty(\"start\")) {\n      starter(getFromBrowser);\n    }\n  });\n}\n\n/**\n *\n * @returns\n */\nexport function createWorkerSource(\n  starter: (getFromBrowser: TPromiseFromBrowserToWorker) => void,\n): Worker {\n  const source = window.URL.createObjectURL(\n    new Blob([\"(\", runWorkerScript.toString(), \")(\", starter.toString(), \")\"], {\n      type: \"text/javascript\",\n    }),\n  );\n\n  console.warn(source);\n\n  return new Worker(source);\n}\n\n/**\n *\n * @param callers named function object that will run in window scope\n * @param starter function that will be converted into a string and will be executed within the Worker (must be compatible)\n * @returns\n */\nexport function createWorker(\n  callers: ISubNambedCallers,\n  starter: (getFromBrowser: TPromiseFromBrowserToWorker) => void,\n): Promise<D.TEvalResult> {\n  if (!window) {\n    throw \"[jexpeval] worker only avaliable on browser: window dont exists.\";\n  }\n\n  if (!Worker) {\n    throw \"[jexpeval] worker only avaliable on browser: Worker dont exists.\";\n  }\n\n  const w = createWorkerSource(starter);\n\n  return new Promise<D.TEvalResult>((R0, R_0) => {\n    w.addEventListener(\"message\", function (e) {\n      let _error: string = (() => {\n        if (typeof e !== \"object\") {\n          return \"[jexpeval][runAsWorker][window] message isnot object.\";\n        }\n\n        if (!e.hasOwnProperty(\"data\")) {\n          return \"[jexpeval][runAsWorker][window] message dont contain 'data' proprerty.\";\n        }\n\n        if (typeof e.data !== \"object\") {\n          return \"[jexpeval][runAsWorker][window] data of message isnot object.\";\n        }\n\n        return \"\";\n      })();\n\n      _error =\n        _error.trim().length === 0 && e.data.hasOwnProperty(\"error\")\n          ? e.data.error.trim()\n          : _error;\n\n      _error =\n        _error.trim().length === 0\n          ? (() => {\n              if (e.data.hasOwnProperty(\"caller\")) {\n                if (typeof e.data.caller !== \"string\") {\n                  return \"[jexpeval][runAsWorker][window] caller of message isnot string.\";\n                }\n\n                e.data.caller = e.data.caller.trim();\n\n                if (e.data.caller.length === 0) {\n                  return \"[jexpeval][runAsWorker][window] caller of message is empty.\";\n                }\n\n                if (!callers.hasOwnProperty(e.data.caller)) {\n                  return \"[jexpeval][runAsWorker][window] the caller name does not exist.\";\n                }\n\n                if (typeof callers[e.data.caller] !== \"function\") {\n                  return \"[jexpeval][runAsWorker][window] caller name is not a function.\";\n                }\n              }\n\n              return \"\";\n            })()\n          : _error;\n\n      /* has error or return */\n      if (_error.trim().length > 0 || e.data.hasOwnProperty(\"return\")) {\n        w.terminate();\n\n        return _error.trim().length > 0 ? R_0(_error) : R0(e.data.return);\n      }\n\n      /* sends the result of the call to the worker */\n      if (e.data.hasOwnProperty(\"caller\")) {\n        return callers[e.data.caller](\n          e.data.hasOwnProperty(\"args\") ? e.data.args : [],\n        ).then((r: any, id: string) => {\n          w.postMessage({ return: r, id: id });\n        });\n      }\n\n      throw \"[jexpeval][runAsWorker][window] It was not expected that the execution would reach this line.\";\n    });\n\n    /* start */\n    w.postMessage({\n      start: true,\n    });\n  });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as D from \"./definitions\";\nimport { baseProcessor } from \"./baseProcessor\";\nimport { Literal } from \"./types/Literal\";\nimport * as unknowParser from \"./unknowParser\";\nimport * as WK from \"./worker\";\nimport { TPromiseFromBrowserToWorker } from \"./worker\";\n\n/**\n * https://ericsmekens.github.io/unknowParser/\n */\nexport class jexpeval extends baseProcessor {\n  public static convertToPrintable(\n    input: D.TEvalResult,\n  ): D.TPrintableEvalResult {\n    return 1;\n  }\n\n  /**\n   *\n   * @param input\n   * @returns\n   */\n  public eval(\n    input: string | unknowParser.Expression,\n    printable: boolean = false,\n  ): Promise<D.TEvalResult | D.TPrintableEvalResult> {\n    if (typeof input !== \"string\") {\n      throw \"Eval input in jexpeval isnot string\";\n    }\n\n    return new Promise<D.TEvalResult | D.TPrintableEvalResult>((R0, R_0) => {\n      this._parser(input).then((r: any) => {\n        let tp: null | unknowParser.ExpressionType = (\n          this.constructor as typeof jexpeval\n        ).getType(r);\n\n        if (tp === null) {\n          throw \"Invalid type in lex eval.\";\n        }\n\n        (<baseProcessor>(\n          new (<any>global)[tp](this._parser, this._caller, this._values)\n        ))\n          .eval(<unknowParser.Expression>r)\n          .then((r1) => R0(printable ? jexpeval.convertToPrintable(r1) : r1))\n          .catch((r2) => R_0(r2));\n      });\n    });\n  }\n\n  public static run(\n    str: string,\n    printable: boolean = false,\n    parser: D.TExpParser,\n    caller: D.TGetCaller = baseProcessor.genericCallerSolver,\n    values: D.TGetValue = baseProcessor.genericValuesSolver,\n  ): Promise<D.TEvalResult> {\n    return new jexpeval(parser, caller, values).eval(str, printable);\n  }\n\n  /**\n   *\n   * @param str\n   * @param printable\n   * @param parser\n   * @param caller\n   * @param values\n   * @returns\n   */\n  public static runAsWorker(\n    str: string,\n    printable: boolean = false,\n    parser: D.TExpParser,\n    caller: D.TGetCaller = baseProcessor.genericCallerSolver,\n    values: D.TGetValue = baseProcessor.genericValuesSolver,\n  ): Promise<D.TEvalResult> {\n    return WK.createWorker(\n      {\n        parser: () => {},\n        caller: () => {},\n        values: () => {},\n      },\n      (getFromBrowser: TPromiseFromBrowserToWorker) => {\n        new jexpeval(\n          function (input: string): Promise<unknowParser.Expression> {\n            return <Promise<unknowParser.Expression>>(\n              getFromBrowser(\"parser\", [])\n            );\n          },\n          function (name: string, args: any[]): Promise<D.TEvalResult> {\n            return <Promise<D.TEvalResult>>getFromBrowser(\"caller\", []);\n          },\n          function (name: string): Promise<D.TEvalResult> {\n            return <Promise<D.TEvalResult>>getFromBrowser(\"values\", []);\n          },\n        )\n          .eval(str, printable)\n          .catch((e) => {})\n          .then((r) => {});\n      },\n    );\n  }\n}\n"],"names":[],"sourceRoot":""}