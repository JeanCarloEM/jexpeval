{"version":3,"file":"jexpeval.dev.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;;ACVkC;AAQlC;IACE,uBACqB,OAAqB,EACrB,OAAqB,EACrB,OAAoB;QAFpB,YAAO,GAAP,OAAO,CAAc;QACrB,YAAO,GAAP,OAAO,CAAc;QACrB,YAAO,GAAP,OAAO,CAAa;IAGzC,CAAC;IAOa,qBAAO,GAArB,UAAsB,KAAU;QAC9B,IACE,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;YAC3B,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YAC9B,CAAC,6DAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAC3C;YACA,OAAO,KAAK,CAAC,IAAI,CAAC;SACnB;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAOH,oBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;ACrCM,IAAM,mBAAmB,GAAG;IACjC,UAAU;IACR,YAAY;IACZ,kBAAkB;IAClB,SAAS;IACT,gBAAgB;IAChB,gBAAgB;IAChB,iBAAiB;IACjB,kBAAkB;IAClB,uBAAuB;IACvB,iBAAiB;CACpB,CAAC;;;;;;;UCbF;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACL+C;AAO/C;IAA8B,4BAAa;IAA3C;;IA2BA,CAAC;IArBQ,uBAAI,GAAX,UAAY,KAA+B;QAA3C,iBAoBC;QAnBC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC7B,MAAM,qCAAqC,CAAC;SAC7C;QAED,OAAO,IAAI,OAAO,CAAqB,UAAC,EAAE,EAAE,GAAG;YAC7C,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBAChB,IAAI,CAAC,UAAC,CAAM;gBACX,IAAI,EAAE,GAAgC,KAAI,CAAC,WAA+B,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAEtF,IAAI,EAAE,KAAK,IAAI,EAAE;oBACf,MAAM,2BAA2B;iBAClC;gBAEe,CAAC,IAAU,MAAO,CAAC,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,OAAO,EAAE,KAAI,CAAC,OAAO,CAAC,CAAE;qBAC/E,IAAI,CAAkB,CAAC,CAAC;qBACxB,IAAI,CAAC,YAAE,IAAI,SAAE,CAAC,EAAE,CAAC,EAAN,CAAM,CAAC;qBAClB,KAAK,CAAC,YAAE,IAAI,UAAG,CAAC,EAAE,CAAC,EAAP,CAAO,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACL,CAAC;IACH,eAAC;AAAD,CAAC,CA3B6B,yDAAa,GA2B1C","sources":["webpack://jexpeval/webpack/universalModuleDefinition","webpack://jexpeval/./src/baseProcessor.ts","webpack://jexpeval/./src/definitions.ts","webpack://jexpeval/webpack/bootstrap","webpack://jexpeval/webpack/runtime/define property getters","webpack://jexpeval/webpack/runtime/hasOwnProperty shorthand","webpack://jexpeval/webpack/runtime/make namespace object","webpack://jexpeval/./src/jexpeval.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"jexpeval\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jexpeval\"] = factory();\n\telse\n\t\troot[\"jexpeval\"] = factory();\n})(self, () => {\nreturn ","import * as D from \"./definitions\"\r\nimport jsep from \"jsep\";\r\nimport { Literal } from \"./types/Literal\"\r\n\r\n\r\n/**\r\n * https://ericsmekens.github.io/jsep/\r\n */\r\nexport abstract class baseProcessor implements D.TTypesProcessor {\r\n  constructor(\r\n    protected readonly _parser: D.TExpParser,\r\n    protected readonly _caller: D.TGetCaller,\r\n    protected readonly _values: D.TGetValue\r\n  ) {\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @returns\r\n   */\r\n  public static getType(input: any): null | jsep.ExpressionType {\r\n    if (\r\n      (typeof input === \"object\") &&\r\n      (input.hasOwnProperty('type')) &&\r\n      (D.ExpressionTypeNames.indexOf(input.type))\r\n    ) {\r\n      return input.type;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   */\r\n  abstract eval(input: string | jsep.Expression): Promise<D.TDefaultBaseType>;\r\n}","import jsep from \"jsep\";\r\n\r\nexport const ExpressionTypeNames = [\r\n  'Compound'\r\n  , 'Identifier'\r\n  , 'MemberExpression'\r\n  , 'Literal'\r\n  , 'ThisExpression'\r\n  , 'CallExpression'\r\n  , 'UnaryExpression'\r\n  , 'BinaryExpression'\r\n  , 'ConditionalExpression'\r\n  , 'ArrayExpression'\r\n];\r\n\r\nexport type TDefaultBaseType = null | string | number | boolean;\r\n//export type TTypesProcessor = (input: ExpressionType) => Promise<TDefaultBaseType>;\r\n\r\nexport type TGetCaller = (name: string, args: any[]) => Promise<TDefaultBaseType>;\r\nexport type TGetValue = (name: string, args: any[]) => Promise<TDefaultBaseType>;\r\nexport type TExpParser = (input: string) => Promise<jsep.Expression>;\r\n\r\nexport interface TStringKeyMap { [key: string]: TDefaultBaseType; }\r\n\r\nexport interface TTypesProcessor {\r\n  eval (input: string | jsep.Expression): Promise<TDefaultBaseType>;\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as D from \"./definitions\"\r\nimport { baseProcessor } from \"./baseProcessor\"\r\nimport { Literal } from \"./types/Literal\"\r\nimport jsep from \"jsep\";\r\n\r\n/**\r\n * https://ericsmekens.github.io/jsep/\r\n */\r\nexport class jexpeval extends baseProcessor {\r\n  /**\r\n   *\r\n   * @param input\r\n   * @returns\r\n   */\r\n  public eval(input: string | jsep.Expression): Promise<D.TDefaultBaseType> {\r\n    if (typeof input !== 'string') {\r\n      throw \"Eval input in jexpeval isnot string\";\r\n    }\r\n\r\n    return new Promise<D.TDefaultBaseType>((R0, R_0) => {\r\n      this._parser(input)\r\n        .then((r: any) => {\r\n          let tp: null | jsep.ExpressionType = (this.constructor as typeof jexpeval).getType(r);\r\n\r\n          if (tp === null) {\r\n            throw \"Invalid type in lex eval.\"\r\n          }\r\n\r\n          (<baseProcessor>(new (<any>window)[tp](this._parser, this._caller, this._values)))\r\n            .eval(<jsep.Expression>r)\r\n            .then(r1 => R0(r1))\r\n            .catch(r2 => R_0(r2));\r\n        });\r\n    });\r\n  }\r\n}"],"names":[],"sourceRoot":""}